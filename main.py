import json
import hmac
import hashlib
import time
import threading
import urllib.request
import urllib.parse
import numpy as np
import websocket
import logging
import requests
import os
from datetime import datetime
from concurrent.futures import ThreadPoolExecutor

# C·∫•u h√¨nh logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('bot_logs.log')
    ]
)
logger = logging.getLogger()

# L·∫•y c·∫•u h√¨nh t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
BINANCE_API_KEY = os.getenv('BINANCE_API_KEY', '')
BINANCE_SECRET_KEY = os.getenv('BINANCE_SECRET_KEY', '')
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN', '')
TELEGRAM_CHAT_ID = os.getenv('TELEGRAM_CHAT_ID', '')
    
# C·∫•u h√¨nh bot t·ª´ bi·∫øn m√¥i tr∆∞·ªùng (d·∫°ng JSON)
bot_config_json = os.getenv('BOT_CONFIGS', '[]')
try:
    BOT_CONFIGS = json.loads(bot_config_json)
except:
    BOT_CONFIGS = []

API_KEY = BINANCE_API_KEY
API_SECRET = BINANCE_SECRET_KEY

# ========== H√ÄM G·ª¨I TELEGRAM ==========
def send_telegram(message, chat_id=None, reply_markup=None):
    """G·ª≠i th√¥ng b√°o qua Telegram v·ªõi menu t√πy ch·ªçn"""
    if not TELEGRAM_BOT_TOKEN:
        logger.warning("Ch∆∞a c·∫•u h√¨nh Telegram Bot Token")
        return
    
    chat_id = chat_id or TELEGRAM_CHAT_ID
    if not chat_id:
        logger.warning("Ch∆∞a c·∫•u h√¨nh Telegram Chat ID")
        return
    
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    payload = {
        "chat_id": chat_id,
        "text": message,
        "parse_mode": "HTML"
    }
    
    if reply_markup:
        payload["reply_markup"] = json.dumps(reply_markup)
    
    try:
        response = requests.post(url, json=payload, timeout=10)
        if response.status_code != 200:
            logger.error(f"L·ªói g·ª≠i Telegram: {response.text}")
    except Exception as e:
        logger.error(f"L·ªói k·∫øt n·ªëi Telegram: {e}")

# ========== H√ÄM T·∫†O MENU TELEGRAM ==========
def create_menu_keyboard():
    """T·∫°o menu 3 n√∫t cho Telegram"""
    return {
        "keyboard": [
            [{"text": "üìä Danh s√°ch Bot"}],
            [{"text": "‚ûï Th√™m Bot"}, {"text": "‚õî D·ª´ng Bot"}],
            [{"text": "üí∞ S·ªë d∆∞ t√†i kho·∫£n"}, {"text": "üìà V·ªã th·∫ø ƒëang m·ªü"}]
        ],
        "resize_keyboard": True,
        "one_time_keyboard": False
    }

def create_cancel_keyboard():
    """T·∫°o b√†n ph√≠m h·ªßy"""
    return {
        "keyboard": [[{"text": "‚ùå H·ªßy b·ªè"}]],
        "resize_keyboard": True,
        "one_time_keyboard": True
    }

def create_symbols_keyboard():
    """T·∫°o b√†n ph√≠m ch·ªçn c·∫∑p coin"""
    popular_symbols = ["BTCUSDT", "ETHUSDT", "BNBUSDT", "SOLUSDT", "XRPUSDT", "ADAUSDT"]
    keyboard = []
    row = []
    for symbol in popular_symbols:
        row.append({"text": symbol})
        if len(row) == 2:
            keyboard.append(row)
            row = []
    if row:
        keyboard.append(row)
    keyboard.append([{"text": "‚ùå H·ªßy b·ªè"}])
    
    return {
        "keyboard": keyboard,
        "resize_keyboard": True,
        "one_time_keyboard": True
    }

def create_leverage_keyboard():
    """T·∫°o b√†n ph√≠m ch·ªçn ƒë√≤n b·∫©y"""
    leverages = ["10", "20", "30", "50", "75", "100"]
    keyboard = []
    row = []
    for lev in leverages:
        row.append({"text": f"‚öñÔ∏è {lev}x"})
        if len(row) == 3:
            keyboard.append(row)
            row = []
    if row:
        keyboard.append(row)
    keyboard.append([{"text": "‚ùå H·ªßy b·ªè"}])
    
    return {
        "keyboard": keyboard,
        "resize_keyboard": True,
        "one_time_keyboard": True
    }

# ========== H√ÄM H·ªñ TR·ª¢ API BINANCE ==========
def sign(query):
    try:
        return hmac.new(API_SECRET.encode(), query.encode(), hashlib.sha256).hexdigest()
    except Exception as e:
        logger.error(f"Sign error: {e}")
        send_telegram(f"‚ö†Ô∏è <b>L·ªñI SIGN:</b> {str(e)}")
        return ""

def get_step_size(symbol):
    url = "https://fapi.binance.com/fapi/v1/exchangeInfo"
    try:
        response = urllib.request.urlopen(url)
        data = json.loads(response.read())
        for s in data['symbols']:
            if s['symbol'] == symbol.upper():
                for f in s['filters']:
                    if f['filterType'] == 'LOT_SIZE':
                        return float(f['stepSize'])
    except Exception as e:
        logger.error(f"Error getting step size: {e}")
        send_telegram(f"‚ö†Ô∏è <b>L·ªñI STEP SIZE:</b> {symbol} - {str(e)}")
    return 0.001

def set_leverage(symbol, lev):
    try:
        ts = int(time.time() * 1000)
        params = {
            "symbol": symbol.upper(),
            "leverage": lev,
            "timestamp": ts
        }
        query = urllib.parse.urlencode(params)
        sig = sign(query)
        url = f"https://fapi.binance.com/fapi/v1/leverage?{query}&signature={sig}"
        req = urllib.request.Request(url, headers={'X-MBX-APIKEY': API_KEY}, method='POST')
        with urllib.request.urlopen(req) as response:
            data = json.loads(response.read())
            if 'leverage' in data:
                return True
    except Exception as e:
        logger.error(f"Error setting leverage: {e}")
        send_telegram(f"‚ö†Ô∏è <b>L·ªñI ƒê√íN B·∫®Y:</b> {symbol} - {str(e)}")
    return False

def get_balance():
    try:
        ts = int(time.time() * 1000)
        params = {"timestamp": ts}
        query = urllib.parse.urlencode(params)
        sig = sign(query)
        url = f"https://fapi.binance.com/fapi/v2/account?{query}&signature={sig}"
        req = urllib.request.Request(url, headers={'X-MBX-APIKEY': API_KEY})
        with urllib.request.urlopen(req) as response:
            data = json.loads(response.read())
            for asset in data['assets']:
                if asset['asset'] == 'USDT':
                    return float(asset['availableBalance'])
    except Exception as e:
        logger.error(f"Error getting balance: {e}")
        send_telegram(f"‚ö†Ô∏è <b>L·ªñI S·ªê D∆Ø:</b> {str(e)}")
    return 0

def place_order(symbol, side, qty):
    try:
        ts = int(time.time() * 1000)
        params = {
            "symbol": symbol.upper(),
            "side": side,
            "type": "MARKET",
            "quantity": qty,
            "timestamp": ts
        }
        query = urllib.parse.urlencode(params)
        sig = sign(query)
        url = f"https://fapi.binance.com/fapi/v1/order?{query}&signature={sig}"
        req = urllib.request.Request(url, headers={'X-MBX-APIKEY': API_KEY}, method='POST')
        with urllib.request.urlopen(req) as response:
            return json.loads(response.read())
    except Exception as e:
        logger.error(f"Error placing order: {e}")
        send_telegram(f"‚ö†Ô∏è <b>L·ªñI ƒê·∫∂T L·ªÜNH:</b> {symbol} - {str(e)}")
    return None

def cancel_all_orders(symbol):
    try:
        ts = int(time.time() * 1000)
        params = {"symbol": symbol.upper(), "timestamp": ts}
        query = urllib.parse.urlencode(params)
        sig = sign(query)
        url = f"https://fapi.binance.com/fapi/v1/allOpenOrders?{query}&signature={sig}"
        req = urllib.request.Request(url, headers={'X-MBX-APIKEY': API_KEY}, method='DELETE')
        urllib.request.urlopen(req)
        return True
    except Exception as e:
        logger.error(f"Error canceling orders: {e}")
        send_telegram(f"‚ö†Ô∏è <b>L·ªñI H·ª¶Y L·ªÜNH:</b> {symbol} - {str(e)}")
    return False

def get_current_price(symbol):
    try:
        url = f"https://fapi.binance.com/fapi/v1/ticker/price?symbol={symbol.upper()}"
        with urllib.request.urlopen(url) as response:
            data = json.loads(response.read())
            return float(data['price'])
    except Exception as e:
        logger.error(f"Error getting price: {e}")
        send_telegram(f"‚ö†Ô∏è <b>L·ªñI GI√Å:</b> {symbol} - {str(e)}")
    return 0

def get_positions(symbol=None):
    try:
        ts = int(time.time() * 1000)
        params = {"timestamp": ts}
        if symbol:
            params["symbol"] = symbol.upper()
            
        query = urllib.parse.urlencode(params)
        sig = sign(query)
        url = f"https://fapi.binance.com/fapi/v2/positionRisk?{query}&signature={sig}"
        req = urllib.request.Request(url, headers={'X-MBX-APIKEY': API_KEY})
        with urllib.request.urlopen(req) as response:
            positions = json.loads(response.read())
            
            if symbol:
                for pos in positions:
                    if pos['symbol'] == symbol.upper():
                        return [pos]
            
            return positions
    except Exception as e:
        logger.error(f"Error getting positions: {e}")
        send_telegram(f"‚ö†Ô∏è <b>L·ªñI V·ªä TH·∫æ:</b> {symbol if symbol else ''} - {str(e)}")
    return []

# ========== T√çNH CH·ªà B√ÅO K·ª∏ THU·∫¨T ==========
def calc_rsi(prices, period=14):
    if len(prices) < period + 1:
        return None
    
    deltas = np.diff(prices)
    gains = np.where(deltas > 0, deltas, 0)
    losses = np.where(deltas < 0, -deltas, 0)
    
    avg_gain = np.mean(gains[:period])
    avg_loss = np.mean(losses[:period])
    
    if avg_loss == 0:
        return 100.0
    
    rs = avg_gain / avg_loss
    return 100.0 - (100.0 / (1 + rs))

def calc_ema(prices, period=21):
    if len(prices) < period:
        return None
    
    ema = np.mean(prices[:period])
    k = 2 / (period + 1)
    
    for price in prices[period:]:
        ema = price * k + ema * (1 - k)
    
    return ema

# ========== QU·∫¢N L√ù WEBSOCKET HI·ªÜU QU·∫¢ ==========
class WebSocketManager:
    def __init__(self):
        self.connections = {}
        self.executor = ThreadPoolExecutor(max_workers=20)
        self._lock = threading.Lock()
        
    def add_symbol(self, symbol, callback):
        symbol = symbol.upper()
        with self._lock:
            if symbol not in self.connections:
                self._create_connection(symbol, callback)
                
    def _create_connection(self, symbol, callback):
        stream = f"{symbol.lower()}@trade"
        url = f"wss://fstream.binance.com/ws/{stream}"
        
        def on_message(ws, message):
            try:
                data = json.loads(message)
                if 'p' in data:
                    price = float(data['p'])
                    self.executor.submit(callback, price)
            except Exception as e:
                logger.error(f"Message error for {symbol}: {e}")
                
        def on_error(ws, error):
            logger.error(f"WebSocket error for {symbol}: {error}")
            time.sleep(5)
            self._reconnect(symbol, callback)
            
        def on_close(ws, close_status_code, close_msg):
            logger.info(f"WebSocket closed for {symbol}: {close_status_code} - {close_msg}")
            if symbol in self.connections:
                time.sleep(5)
                self._reconnect(symbol, callback)
                
        ws = websocket.WebSocketApp(
            url,
            on_message=on_message,
            on_error=on_error,
            on_close=on_close
        )
        
        thread = threading.Thread(target=ws.run_forever, daemon=True)
        thread.start()
        
        self.connections[symbol] = {
            'ws': ws,
            'thread': thread,
            'callback': callback
        }
        logger.info(f"WebSocket started for {symbol}")
        
    def _reconnect(self, symbol, callback):
        logger.info(f"Reconnecting WebSocket for {symbol}")
        self.remove_symbol(symbol)
        self._create_connection(symbol, callback)
        
    def remove_symbol(self, symbol):
        symbol = symbol.upper()
        with self._lock:
            if symbol in self.connections:
                try:
                    self.connections[symbol]['ws'].close()
                except:
                    pass
                del self.connections[symbol]
                logger.info(f"WebSocket removed for {symbol}")
                
    def stop(self):
        for symbol in list(self.connections.keys()):
            self.remove_symbol(symbol)

# ========== BOT CH√çNH V·ªöI T√çCH H·ª¢P TELEGRAM ==========
class IndicatorBot:
    def __init__(self, symbol, lev, percent, tp, sl, indicator, ws_manager):
        self.symbol = symbol.upper()
        self.lev = lev
        self.percent = percent
        self.tp = tp
        self.sl = sl
        self.indicator = indicator
        self.ws_manager = ws_manager
        self.status = "waiting"
        self.side = ""
        self.qty = 0
        self.entry = 0
        self.prices = []
        self._stop = False
        self.position_open = False
        self.last_trade_time = 0
        self.last_rsi = 50
        self.position_check_interval = 60
        self.last_position_check = 0
        self.last_error_log_time = 0
        
        # ƒêƒÉng k√Ω v·ªõi WebSocket Manager
        self.ws_manager.add_symbol(self.symbol, self._handle_price_update)
        
        # B·∫Øt ƒë·∫ßu thread ch√≠nh
        self.thread = threading.Thread(target=self._run, daemon=True)
        self.thread.start()
        self.log(f"üü¢ Bot kh·ªüi ƒë·ªông cho {self.symbol}")

    def log(self, message):
        """Ghi log v√† g·ª≠i qua Telegram"""
        logger.info(f"[{self.symbol}] {message}")
        send_telegram(f"<b>{self.symbol}</b>: {message}")

    def _handle_price_update(self, price):
        if self._stop: 
            return
            
        self.prices.append(price)
        if len(self.prices) > 100:
            self.prices = self.prices[-100:]

    def _run(self):
        """Lu·ªìng ch√≠nh qu·∫£n l√Ω bot"""
        while not self._stop:
            try:
                current_time = time.time()
                
                # Ki·ªÉm tra tr·∫°ng th√°i v·ªã th·∫ø ƒë·ªãnh k·ª≥
                if current_time - self.last_position_check > self.position_check_interval:
                    self.check_position_status()
                    self.last_position_check = current_time
                
                # X·ª≠ l√Ω logic giao d·ªãch
                if not self.position_open and self.status == "waiting":
                    signal = self.get_signal()
                    
                    if signal and current_time - self.last_trade_time > 60:
                        self.open_position(signal)
                        self.last_trade_time = current_time
                
                # Ki·ªÉm tra TP/SL cho v·ªã th·∫ø ƒëang m·ªü
                if self.position_open and self.status == "open":
                    self.check_tp_sl()
                
                time.sleep(1)
                
            except Exception as e:
                if time.time() - self.last_error_log_time > 10:
                    self.log(f"Bot error: {e}")
                    self.last_error_log_time = time.time()
                time.sleep(5)

    def stop(self):
        self._stop = True
        self.ws_manager.remove_symbol(self.symbol)
        try:
            cancel_all_orders(self.symbol)
        except Exception as e:
            if time.time() - self.last_error_log_time > 10:
                self.log(f"L·ªói h·ªßy l·ªánh: {e}")
                self.last_error_log_time = time.time()
        self.log(f"üî¥ Bot d·ª´ng cho {self.symbol}")

    def check_position_status(self):
        """Ki·ªÉm tra tr·∫°ng th√°i v·ªã th·∫ø t·ª´ API Binance"""
        try:
            positions = get_positions(self.symbol)
            
            if not positions or len(positions) == 0:
                self.position_open = False
                self.status = "waiting"
                self.side = ""
                self.qty = 0
                self.entry = 0
                return
            
            for pos in positions:
                if pos['symbol'] == self.symbol:
                    position_amt = float(pos['positionAmt'])
                    
                    if abs(position_amt) > 0:
                        self.position_open = True
                        self.status = "open"
                        self.side = "BUY" if position_amt > 0 else "SELL"
                        self.qty = position_amt
                        self.entry = float(pos['entryPrice'])
                        return
            
            self.position_open = False
            self.status = "waiting"
            self.side = ""
            self.qty = 0
            self.entry = 0
            
        except Exception as e:
            if time.time() - self.last_error_log_time > 10:
                self.log(f"L·ªói ki·ªÉm tra v·ªã th·∫ø: {e}")
                self.last_error_log_time = time.time()

    def check_tp_sl(self):
        """T·ª± ƒë·ªông ki·ªÉm tra v√† ƒë√≥ng l·ªánh khi ƒë·∫°t TP/SL"""
        if not self.position_open or not self.entry or not self.qty:
            return
            
        try:
            if len(self.prices) > 0:
                current_price = self.prices[-1]
            else:
                current_price = get_current_price(self.symbol)
                
            if current_price <= 0:
                return
                
            # T√≠nh ROI
            if self.side == "BUY":
                profit = (current_price - self.entry) * self.qty
            else:
                profit = (self.entry - current_price) * abs(self.qty)
                
            # T√≠nh % ROI d·ª±a tr√™n v·ªën ban ƒë·∫ßu
            invested = self.entry * abs(self.qty) / self.lev
            roi = (profit / invested) * 100
            
            # Ki·ªÉm tra TP/SL
            if roi >= self.tp:
                self.close_position(f"‚úÖ ƒê·∫°t TP {self.tp}% (ROI: {roi:.2f}%)")
            elif roi <= -self.sl:
                self.close_position(f"‚ùå ƒê·∫°t SL {self.sl}% (ROI: {roi:.2f}%)")
                
        except Exception as e:
            if time.time() - self.last_error_log_time > 10:
                self.log(f"L·ªói ki·ªÉm tra TP/SL: {e}")
                self.last_error_log_time = time.time()

    def get_signal(self):
        if len(self.prices) < 40:
            return None
            
        prices_arr = np.array(self.prices)
        
        # S·ª≠ d·ª•ng RSI l√†m ch·ªâ b√°o ch√≠nh
        rsi_val = calc_rsi(prices_arr)
        
        if rsi_val is not None:
            self.last_rsi = rsi_val
            if rsi_val <= 30: 
                return "BUY"
            if rsi_val >= 70: 
                return "SELL"
                    
        return None

    def open_position(self, side):
        # Ki·ªÉm tra l·∫°i tr·∫°ng th√°i tr∆∞·ªõc khi v√†o l·ªánh
        self.check_position_status()
        
        if self.position_open:
            self.log(f"‚ö†Ô∏è ƒê√£ c√≥ v·ªã th·∫ø m·ªü, kh√¥ng v√†o l·ªánh m·ªõi")
            return
            
        try:
            # H·ªßy l·ªánh t·ªìn ƒë·ªçng
            cancel_all_orders(self.symbol)
            
            # ƒê·∫∑t ƒë√≤n b·∫©y
            if not set_leverage(self.symbol, self.lev):
                self.log(f"Kh√¥ng th·ªÉ ƒë·∫∑t ƒë√≤n b·∫©y {self.lev}")
                return
            
            # T√≠nh to√°n kh·ªëi l∆∞·ª£ng
            balance = get_balance()
            if balance <= 0:
                self.log(f"Kh√¥ng ƒë·ªß s·ªë d∆∞ USDT")
                return
            
            usdt_amount = balance * (self.percent / 100)
            price = get_current_price(self.symbol)
            if price <= 0:
                self.log(f"L·ªói l·∫•y gi√°")
                return
                
            step = get_step_size(self.symbol)
            if step <= 0:
                step = 0.001
            
            # T√≠nh s·ªë l∆∞·ª£ng v·ªõi ƒë√≤n b·∫©y
            qty = (usdt_amount * self.lev) / price
            
            # L√†m tr√≤n s·ªë l∆∞·ª£ng theo step size
            if step > 0:
                steps = qty / step
                qty = round(steps) * step
            
            qty = max(qty, 0)
            qty = round(qty, 8)
            
            min_qty = step
            
            if qty < min_qty:
                self.log(f"‚ö†Ô∏è S·ªë l∆∞·ª£ng qu√° nh·ªè ({qty}), kh√¥ng ƒë·∫∑t l·ªánh")
                return
                
            # ƒê·∫∑t l·ªánh
            res = place_order(self.symbol, side, qty)
            if not res:
                self.log(f"L·ªói khi ƒë·∫∑t l·ªánh")
                return
                
            executed_qty = float(res.get('executedQty', 0))
            if executed_qty <= 0:
                self.log(f"L·ªánh kh√¥ng kh·ªõp, s·ªë l∆∞·ª£ng th·ª±c thi: {executed_qty}")
                return

            # C·∫≠p nh·∫≠t tr·∫°ng th√°i
            self.entry = float(res.get('avgPrice', price))
            self.side = side
            self.qty = executed_qty if side == "BUY" else -executed_qty
            self.status = "open"
            self.position_open = True
            
            # Th√¥ng b√°o qua Telegram
            message = (
                f"‚úÖ <b>ƒê√É M·ªû V·ªä TH·∫æ {self.symbol}</b>\n"
                f"üìå H∆∞·ªõng: {side}\n"
                f"üè∑Ô∏è Gi√° v√†o: {self.entry:.4f}\n"
                f"üìä Kh·ªëi l∆∞·ª£ng: {executed_qty}\n"
                f"üíµ Gi√° tr·ªã: {executed_qty * self.entry:.2f} USDT\n"
                f"‚öñÔ∏è ƒê√≤n b·∫©y: {self.lev}x\n"
                f"üéØ TP: {self.tp}% | üõ°Ô∏è SL: {self.sl}%"
            )
            self.log(message)

        except Exception as e:
            self.position_open = False
            self.log(f"‚ùå L·ªói khi v√†o l·ªánh: {e}")

    def close_position(self, reason=""):
        try:
            # H·ªßy l·ªánh t·ªìn ƒë·ªçng
            cancel_all_orders(self.symbol)
            
            if abs(self.qty) > 0:
                close_side = "SELL" if self.side == "BUY" else "BUY"
                close_qty = abs(self.qty)
                
                # L√†m tr√≤n s·ªë l∆∞·ª£ng
                step = get_step_size(self.symbol)
                if step > 0:
                    steps = close_qty / step
                    close_qty = round(steps) * step
                
                close_qty = max(close_qty, 0)
                close_qty = round(close_qty, 8)
                
                res = place_order(self.symbol, close_side, close_qty)
                if res:
                    price = float(res.get('avgPrice', 0))
                    # Th√¥ng b√°o qua Telegram
                    message = (
                        f"‚õî <b>ƒê√É ƒê√ìNG V·ªä TH·∫æ {self.symbol}</b>\n"
                        f"üìå L√Ω do: {reason}\n"
                        f"üè∑Ô∏è Gi√° ra: {price:.4f}\n"
                        f"üìä Kh·ªëi l∆∞·ª£ng: {close_qty}\n"
                        f"üíµ Gi√° tr·ªã: {close_qty * price:.2f} USDT"
                    )
                    self.log(message)
                else:
                    self.log(f"L·ªói khi ƒë√≥ng l·ªánh")
                    
            # Ki·ªÉm tra l·∫°i tr·∫°ng th√°i
            time.sleep(1)
            self.check_position_status()
            
            # N·∫øu v·∫´n c√≤n v·ªã th·∫ø, th·ª≠ ƒë√≥ng l·∫°i
            if self.position_open:
                self.log(f"‚ö†Ô∏è V·ªã th·∫ø ch∆∞a ƒë√≥ng, th·ª≠ ƒë√≥ng l·∫°i")
                self.close_position("Th·ª≠ ƒë√≥ng l·∫°i")
                return
                    
            # Reset tr·∫°ng th√°i
            self.status = "waiting"
            self.side = ""
            self.qty = 0
            self.entry = 0
            self.position_open = False
            self.last_trade_time = time.time()
            
        except Exception as e:
            self.log(f"‚ùå L·ªói khi ƒë√≥ng l·ªánh: {e}")

# ========== QU·∫¢N L√ù BOT CH·∫†Y N·ªÄN V√Ä T∆Ø∆†NG T√ÅC TELEGRAM ==========
class BotManager:
    def __init__(self):
        self.ws_manager = WebSocketManager()
        self.bots = {}
        self.running = True
        self.start_time = time.time()
        self.user_states = {}  # L∆∞u tr·∫°ng th√°i ng∆∞·ªùi d√πng
        self.admin_chat_id = TELEGRAM_CHAT_ID
        
        self.log("üü¢ H·ªÜ TH·ªêNG BOT ƒê√É KH·ªûI ƒê·ªòNG")
        
        # B·∫Øt ƒë·∫ßu thread ki·ªÉm tra tr·∫°ng th√°i
        self.status_thread = threading.Thread(target=self._status_monitor, daemon=True)
        self.status_thread.start()
        
        # B·∫Øt ƒë·∫ßu thread l·∫Øng nghe Telegram
        self.telegram_thread = threading.Thread(target=self._telegram_listener, daemon=True)
        self.telegram_thread.start()
        
        # G·ª≠i menu ch√≠nh khi kh·ªüi ƒë·ªông
        if self.admin_chat_id:
            self.send_main_menu(self.admin_chat_id)

    def log(self, message):
        """Ghi log h·ªá th·ªëng v√† g·ª≠i Telegram"""
        logger.info(f"[SYSTEM] {message}")
        send_telegram(f"<b>SYSTEM</b>: {message}")

    def send_main_menu(self, chat_id):
        """G·ª≠i menu ch√≠nh cho ng∆∞·ªùi d√πng"""
        welcome = (
            "ü§ñ <b>BOT GIAO D·ªäCH FUTURES BINANCE</b>\n\n"
            "Ch·ªçn m·ªôt trong c√°c t√πy ch·ªçn b√™n d∆∞·ªõi:"
        )
        send_telegram(welcome, chat_id, create_menu_keyboard())

    def add_bot(self, symbol, lev, percent, tp, sl, indicator):
        symbol = symbol.upper()
        if symbol in self.bots:
            self.log(f"‚ö†Ô∏è ƒê√£ c√≥ bot cho {symbol}")
            return False
            
        # Ki·ªÉm tra API key
        if not API_KEY or not API_SECRET:
            self.log("‚ùå Ch∆∞a c·∫•u h√¨nh API Key v√† Secret Key!")
            return False
            
        try:
            # Ki·ªÉm tra k·∫øt n·ªëi API
            price = get_current_price(symbol)
            if price <= 0:
                self.log(f"‚ùå Kh√¥ng th·ªÉ l·∫•y gi√° cho {symbol}")
                return False
            
            # Ki·ªÉm tra v·ªã th·∫ø hi·ªán t·∫°i
            positions = get_positions(symbol)
            if positions and any(float(pos['positionAmt']) != 0 for pos in positions):
                self.log(f"‚ö†Ô∏è ƒê√£ c√≥ v·ªã th·∫ø m·ªü cho {symbol} tr√™n Binance")
                return False
            
            # T·∫°o bot m·ªõi
            bot = IndicatorBot(
                symbol, lev, percent, tp, sl, 
                indicator, self.ws_manager
            )
            self.bots[symbol] = bot
            self.log(f"‚úÖ ƒê√£ th√™m bot: {symbol} | ƒêB: {lev}x | %: {percent} | TP/SL: {tp}%/{sl}%")
            return True
            
        except Exception as e:
            self.log(f"‚ùå L·ªói t·∫°o bot {symbol}: {str(e)}")
            return False

    def stop_bot(self, symbol):
        symbol = symbol.upper()
        bot = self.bots.get(symbol)
        if bot:
            bot.stop()
            if bot.status == "open":
                bot.close_position("‚õî D·ª´ng bot th·ªß c√¥ng")
            self.log(f"‚õî ƒê√£ d·ª´ng bot cho {symbol}")
            del self.bots[symbol]
            return True
        return False

    def stop_all(self):
        self.log("‚õî ƒêang d·ª´ng t·∫•t c·∫£ bot...")
        for symbol in list(self.bots.keys()):
            self.stop_bot(symbol)
        self.ws_manager.stop()
        self.running = False
        self.log("üî¥ H·ªá th·ªëng ƒë√£ d·ª´ng")

    def _status_monitor(self):
        """Ki·ªÉm tra v√† b√°o c√°o tr·∫°ng th√°i ƒë·ªãnh k·ª≥"""
        while self.running:
            try:
                # T√≠nh th·ªùi gian ho·∫°t ƒë·ªông
                uptime = time.time() - self.start_time
                hours, rem = divmod(uptime, 3600)
                minutes, seconds = divmod(rem, 60)
                uptime_str = f"{int(hours)}h {int(minutes)}m {int(seconds)}s"
                
                # B√°o c√°o s·ªë bot ƒëang ch·∫°y
                active_bots = [s for s, b in self.bots.items() if not b._stop]
                
                # B√°o c√°o s·ªë d∆∞ t√†i kho·∫£n
                balance = get_balance()
                
                # T·∫°o b√°o c√°o
                status_msg = (
                    f"üìä <b>B√ÅO C√ÅO H·ªÜ TH·ªêNG</b>\n"
                    f"‚è± Th·ªùi gian ho·∫°t ƒë·ªông: {uptime_str}\n"
                    f"ü§ñ S·ªë bot ƒëang ch·∫°y: {len(active_bots)}\n"
                    f"üìà Bot ho·∫°t ƒë·ªông: {', '.join(active_bots) if active_bots else 'Kh√¥ng c√≥'}\n"
                    f"üí∞ S·ªë d∆∞ kh·∫£ d·ª•ng: {balance:.2f} USDT"
                )
                send_telegram(status_msg)
                
                # Log chi ti·∫øt
                for symbol, bot in self.bots.items():
                    if bot.status == "open":
                        status_msg = (
                            f"üîπ <b>{symbol}</b>\n"
                            f"üìå H∆∞·ªõng: {bot.side}\n"
                            f"üè∑Ô∏è Gi√° v√†o: {bot.entry:.4f}\n"
                            f"üìä Kh·ªëi l∆∞·ª£ng: {abs(bot.qty)}\n"
                            f"‚öñÔ∏è ƒê√≤n b·∫©y: {bot.lev}x\n"
                            f"üéØ TP: {bot.tp}% | üõ°Ô∏è SL: {bot.sl}%"
                        )
                        send_telegram(status_msg)
                
            except Exception as e:
                logger.error(f"L·ªói b√°o c√°o tr·∫°ng th√°i: {str(e)}")
            
            # Ki·ªÉm tra m·ªói 6 gi·ªù
            time.sleep(6 * 3600)

    def _telegram_listener(self):
        """L·∫Øng nghe v√† x·ª≠ l√Ω tin nh·∫Øn t·ª´ Telegram"""
        last_update_id = 0
        
        while self.running:
            try:
                # L·∫•y tin nh·∫Øn m·ªõi
                url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/getUpdates?offset={last_update_id+1}&timeout=30"
                response = requests.get(url, timeout=35)
                
                if response.status_code == 200:
                    data = response.json()
                    if data.get('ok'):
                        for update in data['result']:
                            update_id = update['update_id']
                            message = update.get('message', {})
                            chat_id = str(message.get('chat', {}).get('id'))
                            text = message.get('text', '').strip()
                            
                            # Ch·ªâ x·ª≠ l√Ω tin nh·∫Øn t·ª´ admin
                            if chat_id != self.admin_chat_id:
                                continue
                            
                            # C·∫≠p nh·∫≠t ID tin nh·∫Øn cu·ªëi
                            if update_id > last_update_id:
                                last_update_id = update_id
                            
                            # X·ª≠ l√Ω tin nh·∫Øn
                            self._handle_telegram_message(chat_id, text)
                
                time.sleep(1)
                
            except Exception as e:
                logger.error(f"L·ªói Telegram listener: {str(e)}")
                time.sleep(5)

    def _handle_telegram_message(self, chat_id, text):
        """X·ª≠ l√Ω tin nh·∫Øn t·ª´ ng∆∞·ªùi d√πng"""
        # L∆∞u tr·∫°ng th√°i ng∆∞·ªùi d√πng
        user_state = self.user_states.get(chat_id, {})
        current_step = user_state.get('step')
        
        # X·ª≠ l√Ω theo b∆∞·ªõc hi·ªán t·∫°i
        if current_step == 'waiting_symbol':
            if text == '‚ùå H·ªßy b·ªè':
                self.user_states[chat_id] = {}
                send_telegram("‚ùå ƒê√£ h·ªßy th√™m bot", chat_id, create_menu_keyboard())
            else:
                symbol = text.upper()
                self.user_states[chat_id] = {
                    'step': 'waiting_leverage',
                    'symbol': symbol
                }
                send_telegram(f"Ch·ªçn ƒë√≤n b·∫©y cho {symbol}:", chat_id, create_leverage_keyboard())
        
        elif current_step == 'waiting_leverage':
            if text == '‚ùå H·ªßy b·ªè':
                self.user_states[chat_id] = {}
                send_telegram("‚ùå ƒê√£ h·ªßy th√™m bot", chat_id, create_menu_keyboard())
            elif 'x' in text:
                leverage = int(text.replace('‚öñÔ∏è', '').replace('x', '').strip())
                user_state['leverage'] = leverage
                user_state['step'] = 'waiting_percent'
                send_telegram(
                    f"üìå C·∫∑p: {user_state['symbol']}\n‚öñÔ∏è ƒê√≤n b·∫©y: {leverage}x\n\nNh·∫≠p % s·ªë d∆∞ mu·ªën s·ª≠ d·ª•ng (1-100):",
                    chat_id,
                    create_cancel_keyboard()
                )
        
        elif current_step == 'waiting_percent':
            if text == '‚ùå H·ªßy b·ªè':
                self.user_states[chat_id] = {}
                send_telegram("‚ùå ƒê√£ h·ªßy th√™m bot", chat_id, create_menu_keyboard())
            else:
                try:
                    percent = float(text)
                    if 1 <= percent <= 100:
                        user_state['percent'] = percent
                        user_state['step'] = 'waiting_tp'
                        send_telegram(
                            f"üìå C·∫∑p: {user_state['symbol']}\n‚öñÔ∏è ƒêB: {user_state['leverage']}x\nüìä %: {percent}%\n\nNh·∫≠p % Take Profit (v√≠ d·ª•: 10):",
                            chat_id,
                            create_cancel_keyboard()
                        )
                    else:
                        send_telegram("‚ö†Ô∏è Vui l√≤ng nh·∫≠p % t·ª´ 1-100", chat_id)
                except:
                    send_telegram("‚ö†Ô∏è Gi√° tr·ªã kh√¥ng h·ª£p l·ªá, vui l√≤ng nh·∫≠p s·ªë", chat_id)
        
        elif current_step == 'waiting_tp':
            if text == '‚ùå H·ªßy b·ªè':
                self.user_states[chat_id] = {}
                send_telegram("‚ùå ƒê√£ h·ªßy th√™m bot", chat_id, create_menu_keyboard())
            else:
                try:
                    tp = float(text)
                    if tp > 0:
                        user_state['tp'] = tp
                        user_state['step'] = 'waiting_sl'
                        send_telegram(
                            f"üìå C·∫∑p: {user_state['symbol']}\n‚öñÔ∏è ƒêB: {user_state['leverage']}x\nüìä %: {user_state['percent']}%\nüéØ TP: {tp}%\n\nNh·∫≠p % Stop Loss (v√≠ d·ª•: 5):",
                            chat_id,
                            create_cancel_keyboard()
                        )
                    else:
                        send_telegram("‚ö†Ô∏è TP ph·∫£i l·ªõn h∆°n 0", chat_id)
                except:
                    send_telegram("‚ö†Ô∏è Gi√° tr·ªã kh√¥ng h·ª£p l·ªá, vui l√≤ng nh·∫≠p s·ªë", chat_id)
        
        elif current_step == 'waiting_sl':
            if text == '‚ùå H·ªßy b·ªè':
                self.user_states[chat_id] = {}
                send_telegram("‚ùå ƒê√£ h·ªßy th√™m bot", chat_id, create_menu_keyboard())
            else:
                try:
                    sl = float(text)
                    if sl > 0:
                        # Th√™m bot
                        symbol = user_state['symbol']
                        leverage = user_state['leverage']
                        percent = user_state['percent']
                        tp = user_state['tp']
                        
                        if self.add_bot(symbol, leverage, percent, tp, sl, "RSI"):
                            send_telegram(
                                f"‚úÖ <b>ƒê√É TH√äM BOT TH√ÄNH C√îNG</b>\n\n"
                                f"üìå C·∫∑p: {symbol}\n"
                                f"‚öñÔ∏è ƒê√≤n b·∫©y: {leverage}x\n"
                                f"üìä % S·ªë d∆∞: {percent}%\n"
                                f"üéØ TP: {tp}%\n"
                                f"üõ°Ô∏è SL: {sl}%",
                                chat_id,
                                create_menu_keyboard()
                            )
                        else:
                            send_telegram("‚ùå Kh√¥ng th·ªÉ th√™m bot, vui l√≤ng ki·ªÉm tra log", chat_id, create_menu_keyboard())
                        
                        # Reset tr·∫°ng th√°i
                        self.user_states[chat_id] = {}
                    else:
                        send_telegram("‚ö†Ô∏è SL ph·∫£i l·ªõn h∆°n 0", chat_id)
                except:
                    send_telegram("‚ö†Ô∏è Gi√° tr·ªã kh√¥ng h·ª£p l·ªá, vui l√≤ng nh·∫≠p s·ªë", chat_id)
        
        # X·ª≠ l√Ω c√°c l·ªánh ch√≠nh
        elif text == "üìä Danh s√°ch Bot":
            if not self.bots:
                send_telegram("ü§ñ Kh√¥ng c√≥ bot n√†o ƒëang ch·∫°y", chat_id)
            else:
                message = "ü§ñ <b>DANH S√ÅCH BOT ƒêANG CH·∫†Y</b>\n\n"
                for symbol, bot in self.bots.items():
                    status = "üü¢ M·ªü" if bot.status == "open" else "üü° Ch·ªù"
                    message += f"üîπ {symbol} | {status} | {bot.side}\n"
                send_telegram(message, chat_id)
        
        elif text == "‚ûï Th√™m Bot":
            self.user_states[chat_id] = {'step': 'waiting_symbol'}
            send_telegram("Ch·ªçn c·∫∑p coin:", chat_id, create_symbols_keyboard())
        
        elif text == "‚õî D·ª´ng Bot":
            if not self.bots:
                send_telegram("ü§ñ Kh√¥ng c√≥ bot n√†o ƒëang ch·∫°y", chat_id)
            else:
                message = "‚õî <b>CH·ªåN BOT ƒê·ªÇ D·ª™NG</b>\n\n"
                keyboard = []
                row = []
                
                for i, symbol in enumerate(self.bots.keys()):
                    message += f"üîπ {symbol}\n"
                    row.append({"text": f"‚õî {symbol}"})
                    if len(row) == 2 or i == len(self.bots) - 1:
                        keyboard.append(row)
                        row = []
                
                keyboard.append([{"text": "‚ùå H·ªßy b·ªè"}])
                
                send_telegram(
                    message, 
                    chat_id, 
                    {"keyboard": keyboard, "resize_keyboard": True, "one_time_keyboard": True}
                )
        
        elif text.startswith("‚õî "):
            symbol = text.replace("‚õî ", "").strip().upper()
            if symbol in self.bots:
                self.stop_bot(symbol)
                send_telegram(f"‚õî ƒê√£ g·ª≠i l·ªánh d·ª´ng bot {symbol}", chat_id, create_menu_keyboard())
            else:
                send_telegram(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y bot {symbol}", chat_id, create_menu_keyboard())
        
        elif text == "üí∞ S·ªë d∆∞ t√†i kho·∫£n":
            try:
                balance = get_balance()
                send_telegram(f"üí∞ <b>S·ªê D∆Ø KH·∫¢ D·ª§NG</b>: {balance:.2f} USDT", chat_id)
            except Exception as e:
                send_telegram(f"‚ö†Ô∏è L·ªói l·∫•y s·ªë d∆∞: {str(e)}", chat_id)
        
        elif text == "üìà V·ªã th·∫ø ƒëang m·ªü":
            try:
                positions = get_positions()
                if not positions:
                    send_telegram("üì≠ Kh√¥ng c√≥ v·ªã th·∫ø n√†o ƒëang m·ªü", chat_id)
                    return
                
                message = "üìà <b>V·ªä TH·∫æ ƒêANG M·ªû</b>\n\n"
                for pos in positions:
                    if float(pos['positionAmt']) != 0:
                        symbol = pos['symbol']
                        amount = float(pos['positionAmt'])
                        entry = float(pos['entryPrice'])
                        side = "LONG" if amount > 0 else "SHORT"
                        pnl = float(pos['unRealizedProfit'])
                        
                        message += (
                            f"üîπ {symbol} | {side}\n"
                            f"üìä Kh·ªëi l∆∞·ª£ng: {abs(amount):.4f}\n"
                            f"üè∑Ô∏è Gi√° v√†o: {entry:.4f}\n"
                            f"üí∞ PnL: {pnl:.2f} USDT\n\n"
                        )
                
                send_telegram(message, chat_id)
            except Exception as e:
                send_telegram(f"‚ö†Ô∏è L·ªói l·∫•y v·ªã th·∫ø: {str(e)}", chat_id)
        
        # G·ª≠i l·∫°i menu n·∫øu kh√¥ng c√≥ l·ªánh ph√π h·ª£p
        elif text:
            self.send_main_menu(chat_id)

# ========== H√ÄM KH·ªûI CH·∫†Y CH√çNH ==========
def main():
    # Kh·ªüi t·∫°o h·ªá th·ªëng
    manager = BotManager()
    
    # Th√™m c√°c bot t·ª´ c·∫•u h√¨nh
    if BOT_CONFIGS:
        for config in BOT_CONFIGS:
            manager.add_bot(*config)
    else:
        manager.log("‚ö†Ô∏è Kh√¥ng c√≥ c·∫•u h√¨nh bot n√†o ƒë∆∞·ª£c t√¨m th·∫•y!")
    
    # Th√¥ng b√°o s·ªë d∆∞ ban ƒë·∫ßu
    try:
        balance = get_balance()
        manager.log(f"üí∞ S·ªê D∆Ø BAN ƒê·∫¶U: {balance:.2f} USDT")
    except:
        pass
    
    try:
        # Gi·ªØ ch∆∞∆°ng tr√¨nh ch·∫°y
        while manager.running:
            time.sleep(1)
            
    except KeyboardInterrupt:
        manager.log("üëã Nh·∫≠n t√≠n hi·ªáu d·ª´ng t·ª´ ng∆∞·ªùi d√πng...")
    finally:
        manager.stop_all()

if __name__ == "__main__":
    main()